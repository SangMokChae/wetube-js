* 커맨드 라인 입력:
npm install @babel/node
* 커맨드 라인 입력:
npm install @babel/core
* 커맨드 라인 입력:
npm install @babel/preset-env
* 커맨드 라인 입력:
npm install core-js@3
* .babelrc 파일을 만들어주세요
* .babelrc 파일에 아래 내용을 입력 후 저장해주세요:
{
"presets": [ // preset = "사전설정"
[
"@babel/preset-env",
{
"useBuiltIns": "entry",
"corejs":3
}
]
]
}
* "package.json 파일"에서 스크립트로 작성해둔 start 에서 "node"를 "babel-node"로 바꿔주세요.
예) "start": "babel-node index.js"
* index.js 파일에 써뒀던 "const express" 라인을 지우시고 아래와 같이 바꿔주세요:
import "core-js";
import express from "express";
* 아래의 명령어를 커맨드 라인에 입력 후 실행, 테스트 해주세요:
npm start


자세한 내용은 이곳을 참고하시면 돼요: https://babeljs.io/docs/en/babel-preset-env
<from stra2003>


/// video link 실행이 안될시 
middleware에 아래의 링크를 추가

app.use(function(req, res, next) {
res.setHeader("Content-Security-Policy", "script-src 'self' https://archive.org");
return next();
}); --> 이 방식이 search에 비디오도 재생 시켜준다.

or 
(1) app.use( helmet({ contentSecurityPolicy: false })); 로 변경 app.js 에서
or
(2) meta(http-equiv="Content-Security-Policy" content="default-src *") 를 main.pug에서 head 밑에 추가

#
post인지 get인지 정확히 확인하자!!!!

MongoDB 설치시 // chocolatey으로 다운 가능
시스템 환경변수편집 - 환경변수(N) - Path 편집 - 새로 만들기
- MongoDB 설치경로 추가 (예) C:\Program Files\MongoDB\Server\4.4\bin
- VScode 재시작 방법 사용

# mongoDB connect 단계에서 오류 발생시
해당경고

DeprecationWarning: current Server Discovery and Monitoring engine is deprecated, and will be removed in a future version. To use the new Server Discover and Monitoring engine, pass option { useUnifiedTopology: true } to the MongoClient constructor.
가 뜰 경우, 요번에 입력한
useNewUrlParser: true,
useFindAndModify: false에
추가로 useUnifiedTopology: true 입력하면 사라집니다.

// env파일을 사용할 때 .gitignore에서 .env를 추가하는 것을 잊어서는 안된다.

# 좋아요를 저장하거나 유저를 저장하거나 할때는 models안의 js에서 ref를 사용한다.

videos 폴더는 DB에 관련된 폴더이다.

### mongoDB사용법은 3.7장에 자세히 나온다.
use we-tube
db.videos.remove({})
exit --> db data 삭제 방법

# upload video가 실행 되지 않을때
 home.pug에서 videoFile: video.fileUrl로 변경하면 된다.

 #controller에서 어떤 data를 가지고 있다는 것을 표현하고 싶을때는 (:)과 이름을 넣으면 변수로 인식하게 한다.

 ## ESlint 설치방법

 1. 아래 순서대로 eslint와 prettier플러그인 및 설정, prettier를 설치해주세요.
npm install eslint -D
npm install eslint-plugin-prettier -D
npm install eslint-config-prettier -D
npm install prettier -D

2. npx eslint --init

3. 이제 질문이 계속 나오는데 아래 순서대로 선택해주세요.
- To check syntax, find problems, and enforce code style
- JavaScript modules (import/export)
- None of these
- No
- Node
- Use a popular
- Airbnb
- Javascript
- Yes

4. 확장프로그램 검색으로 ESlint extension을 설치해주세요.

5. VScode에서 윈도우는 Ctrl +, 맥은 Cmd +, 입력해주세요.

6. 검색창에 actionon을 입력해준 뒤
Eslint > Code Actions On Save 가 all로 되어있는지 확인해주세요.

7. 그리고 바로 위에 Edit in setting.json을 클릭해 들어가주세요.
editor.formatOnSave 가 ture로 되있는지 확인해주시고
editor.codeActionsOnSave는 null로 되어있을텐데
{ "source.fixAll":tre, "source.fixAll.eslint": false} 로 수정해주고 저장해주세요.

8. 왼쪽사이드보시면 .eslintrc.js가 생성되어있을거에요.
들어가셔서
방법 1.(copy)
  env: {
  browser: true,
  es2021: true,
  node: true,
  },
  extends: [
  'airbnb-base', "plugin:prettier/recommended"
  ],
  parserOptions: {
  ecmaVersion: 12,
  sourceType: 'module',
  },
  rules: {
  "prettier/prettier": "off",
  "no-console":"off",
  "spaced-comment":"off",
  "no-else-return":"off"
  },
  };

방법 2.(copy) -- 권장
  module.exports = {
  env: {
  browser: true,
  es2020: true,
  node: true,
  },
  extends: ["airbnb-base", "plugin:prettier/recommended"],
  parserOptions: {
  ecmaVersion: 11,
  sourceType: "module",
  },
  rules: {
  "prettier/prettier": "off",
  "no-console": "off",
  "spaced-comment": "off",
  "no-else-return": "off"
  },
  };
이렇게 수정해주고 저장해주세요.

9. VScode의 오른쪽 하단에 빨간 금지아이콘과 함께 ESlint라고 있을거에요.
눌러서 allow everywhere 으로 설정해주세요.
그러면 이제 ESlint가 작동하기 시작해요.

# 뭔가 설치된 npm install을 지울때는 npm uninstall something 이라고 작성하면 지워진다.
## 만약 eslint를 사용할 경우 그냥 extention안에 존재하는 eslint만 다운받아도 충분하다.

# Webpack 설치 할때 유의점
It's my code without Version Change! It works!
버전을 낮추거나 바꾸는거 없는 최신버전(?) 코드 공유드립니다.( 2020-09-18)
다음 강의인 #4.3에서도 작동합니다.
https://github.com/jungbumwoo/klossom/commit/9ba480840e35b4155a3766faeae9740b31b4d33c
-----------------------------------------------------------------------
1. extract-text-webpack-plugin가 webpack이 4버전으로 넘어오면서
mini-css-extract-plugin 로 바꾸셔야합니다.
=> npm install --save-dev mini-css-extract-plugin
2. 자세한건 깃헙링크에서 webpack.config.js참고해주세요
3. 깃헙코드에 package.json 보시면 devDependencies에 있는 것들 빠짐없이 설치되어있나 확인해주세용
=================================
const path = require("path");
const autoprefixer = require("autoprefixer");
const MiniCssExtractPlugin = require('mini-css-extract-plugin');

const MODE = process.env.WEBPACK_ENV;
const ENTRY_FILE = path.resolve(__dirname, "assets", "js", "main.js");
const OUTPUT_DIR = path.join(__dirname, "static");

const config = {
entry: ENTRY_FILE,
mode: MODE,
module: {
rules: [
{
test: /\.(scss)$/,
use: [
{
loader: MiniCssExtractPlugin.loader
},
{
loader: "css-loader"
},
{
loader: "postcss-loader",
options: {
postcssOptions: {
plugins: [
[
'autoprefixer',
{
browsers: "cover 99.5%"
},
]
]
}
}
},
{
loader: "sass-loader"
}
]
}
]
},
output: {
path: OUTPUT_DIR,
filename: "[name].js"
},
plugins: [
new MiniCssExtractPlugin({
// Options similar to the same options in webpackOptions.output
// both options are optional
filename: '[name].css'
}),
]
};

module.exports = config;

// 다른 방법으로 
1. npm site들어가서 webpack을 설치한다.
  npm install --save-dev webpack

2. webpack-cli를 설치한다.
  npm install webpack webpack-cli를 설치한다.

# extract text webpack
https://github.com/webpack-contrib/extract-text-webpack-plugin -> 버전 4로 오면서
  npm install --save-dev mini-css-extract-plugin 이렇게 변경해야된다.

  +npm install closs-env
  + npm install --save-dev postcss 
  browserlist: "cover 99.5%" => overrideBrowserslist: "cover 99.5%

#dev:assets and build:assets difference
  dev:assets 파일을 그저 지켜보기만 한다.

js include with webpack err시에
 app.use(
  helmet({
    contentSecurityPolicy: false,
  })
); 를 app에 추가하고
webpack.config.js의 'mode: MODE,'다음줄에 devtool: "source-map"를 추가해 주자!!

##passport 를 쿠키를 생성해주는 미들웨어
다른 앱들도 지원해준다. (ex: insta, googe, facebook atc)

#passport-local mongoose = 사용자 기능을 추가해주는 것
  -기본적인 사용자인증 -> 패스워드 변경 패스워드 확인, 패스워드 생성, 패스워드 암호화